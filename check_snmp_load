#!/usr/bin/perl -w 
############################## check_snmp_load #################
my $Version='1.13';
# Date : Sep 07 2018
# Author  : Patrick Proy ( patrick at proy.org)
# Help : http://nagios.manubulon.com/
# Licence : GPL - http://www.fsf.org/licenses/gpl.txt
# Contributors : F. Lacroix, Fredric Johansson and many others !!!
#################################################################
#
# Help : ./check_snmp_load.pl -h
#

use strict;
use Net::SNMP;
use Getopt::Long;
use Monitoring::Plugin;

my $Name = 'check_snmp_load';

my $np;
# Nagios specific

my $TIMEOUT = 15;
my %ERRORS=('OK'=>0,'WARNING'=>1,'CRITICAL'=>2,'UNKNOWN'=>3,'DEPENDENT'=>4);

# SNMP Datas

# Generic with host-ressource-mib
my $base_proc = "1.3.6.1.2.1.25.3.3.1";   # oid for all proc info
my $proc_id   = "1.3.6.1.2.1.25.3.3.1.1"; # list of processors (product ID)
my $proc_load = "1.3.6.1.2.1.25.3.3.1.2"; # %time the proc was not idle over last minute

# Linux load 

my $linload_table = "1.3.6.1.4.1.2021.10.1";   # net-snmp load table
my $linload_name  = "1.3.6.1.4.1.2021.10.1.2"; # text 'Load-1','Load-5', 'Load-15'
my $linload_load  = "1.3.6.1.4.1.2021.10.1.3"; # effective load table

# Cisco cpu/load

my $cisco_cpu_5m = "1.3.6.1.4.1.9.2.1.58.0"; # Cisco CPU load (5min %)
my $cisco_cpu_1m = "1.3.6.1.4.1.9.2.1.57.0"; # Cisco CPU load (1min %)
my $cisco_cpu_5s = "1.3.6.1.4.1.9.2.1.56.0"; # Cisco CPU load (5sec %)

# Cisco catalyst cpu/load

my $ciscocata_cpu_5m = ".1.3.6.1.4.1.9.9.109.1.1.1.1.5.9"; # Cisco CPU load (5min %)
my $ciscocata_cpu_1m = ".1.3.6.1.4.1.9.9.109.1.1.1.1.3.9"; # Cisco CPU load (1min %)
my $ciscocata_cpu_5s = ".1.3.6.1.4.1.9.9.109.1.1.1.1.4.9"; # Cisco CPU load (5sec %)

# Netscreen cpu/load

my $nsc_cpu_5m = "1.3.6.1.4.1.3224.16.1.4.0"; # NS CPU load (5min %)
my $nsc_cpu_1m = "1.3.6.1.4.1.3224.16.1.2.0"; # NS CPU load (1min %)
my $nsc_cpu_5s = "1.3.6.1.4.1.3224.16.1.3.0"; # NS CPU load (5sec %)

# AS/400 CPU

my $as400_cpu = "1.3.6.1.4.1.2.6.4.5.1.0"; # AS400 CPU load (10000=100%);

# Net-SNMP CPU

my $ns_cpu_idle   = "1.3.6.1.4.1.2021.11.11.0"; # Net-snmp cpu idle
my $ns_cpu_user   = "1.3.6.1.4.1.2021.11.9.0";  # Net-snmp user cpu usage
my $ns_cpu_system = "1.3.6.1.4.1.2021.11.10.0"; # Net-snmp system cpu usage

# Procurve CPU
my $procurve_cpu = "1.3.6.1.4.1.11.2.14.11.5.1.9.6.1.0"; # Procurve CPU Counter

# Nokia CPU
my $nokia_cpu = "1.3.6.1.4.1.94.1.21.1.7.1.0"; # Nokia CPU % usage

# Bluecoat Appliance
my $bluecoat_cpu = "1.3.6.1.4.1.3417.2.4.1.1.1.4.1"; # Bluecoat %cpu usage.

# Fortigate CPU
my $fortigate_cpu = ".1.3.6.1.4.1.12356.1.8.0"; # Fortigate CPU % usage

# Linkproof Appliance
my $linkproof_cpu = "1.3.6.1.4.1.89.35.1.55.0"; # CPU RE (Routing Engine Tasks)
# 1.3.6.1.4.1.89.35.1.53.0 : Ressource utilisation (%) Considers network utilization and internal CPU utilization
# 1.3.6.1.4.1.89.35.1.54 : CPU only (%)
# 1.3.6.1.4.1.89.35.1.55 : network only (%)

# HP-UX cpu usage (thanks to krizb for the OIDs).
my $hpux_load_1_min  = "1.3.6.1.4.1.11.2.3.1.1.3.0";
my $hpux_load_5_min  = "1.3.6.1.4.1.11.2.3.1.1.4.0";
my $hpux_load_15_min = "1.3.6.1.4.1.11.2.3.1.1.5.0";
 
# valid values 
my @valid_types = ("stand", "netsc", "netsl", "as400", "cisco", "cata", "nsc", "fg", "bc", "nokia", "hp", "lp", "hpux");
# CPU OID array
my %cpu_oid = ("netsc", $ns_cpu_idle, "as400", $as400_cpu, "bc", $bluecoat_cpu, "nokia", $nokia_cpu, "hp", $procurve_cpu, "lp", $linkproof_cpu, "fg", $fortigate_cpu);

# Globals


my $o_host          = undef;    # hostname
my $o_community     = undef;    # community
my $o_port          = 161;       # port
my $o_domain        = "udp";     # use tcp or udp, ipv4 or ipv6
my $o_verb          = undef;    # verbose mode
# check type  : stand | netsc |  netsl | as400 | cisco | cata | nsc | fg | bc | nokia | hp | lp  | hpux
my $o_check_type    = "stand";
# End compatibility
my $o_warn          = undef;    # warning level
my @o_warnL         = undef;    # warning levels for Linux Load or Cisco CPU
my $o_crit          = undef;    # critical level
my @o_critL         = undef;    # critical level for Linux Load or Cisco CPU
my $o_timeout       = undef;    # Timeout (Default 5)
my $o_perf          = undef;    # Output performance data
my $o_version2      = undef;    # use snmp v2c
# SNMPv3 specific
my $o_login         = undef;    # Login for snmpv3
my $o_passwd        = undef;    # Pass for snmpv3
my $v3protocols     = undef;    # V3 protocol list.
my $o_authproto     = 'md5';     # Auth protocol
my $o_privproto     = 'des';     # Priv protocol
my $o_privpass      = undef;    # priv password

# functions

my $usage = "Usage: $0 [-v] -H <host> -C <snmp_community> [-2] | (-l login -x passwd [-X pass -L <authp>,<privp>])  [-p <port>] -w <warn level> -c <crit level> -T=[stand|netsl|netsc|as400|cisco|cata|nsc|fg|bc|nokia|hp|lp|hpux] [-f] [-t <timeout>] [-V]\n";

sub print_usage {
    print $usage;
}

sub isnnum { # Return true if arg is not a number
    my $num = shift;
    if ( $num =~ /^(\d+\.?\d*)|(^\.\d+)$/ ) {
        return 0;
    }
    return 1;
}

# For verbose output
sub verb {
    my $t = shift;
    print $t, "\n" if $o_verb;
}

sub check_options {
    $np->add_arg(
        spec => 'hostname|H=s',
        help => 'name or IP address of host to check',
        label => 'HOST',
        required => 1
    );
    $np->add_arg(
        spec => 'port|p=i',
        help => 'SNMP port (Default %s)',
        label => 'PORT',
        default => $o_port
    );
    $np->add_arg(
        spec => 'domain|D=s',
        help => 'Selects the transport protocol: udp or tcp. (tcp|tcp6|udp|udp6 : default %s)',
        label => '<tcp|tcp6|udp|udp6>',
        default => 'udp'
    );
    $np->add_arg(
        spec => 'community|C=s',
        help => 'community name for the host\'s SNMP agent (implies SNMP v1 or v2c with option)',
        label => 'COMMUNITY_NAME'
    );
    $np->add_arg(
        spec => 'v2c|2',
        help => 'Use snmp v2c'
    );
    $np->add_arg(
        spec => 'login|l=s',
        help => 'Login password for snmpv3 authentication '
    );
    $np->add_arg(
        spec => 'passwd|x=s',
        help => 'Auth password for snmpv3 authentication
   If no priv password exists, implies AuthNoPriv',
        label => 'PASSWD'
    );
    $np->add_arg(
        spec => 'privpass|X=s',
        help => 'Priv password for snmpv3 (AuthPriv protocol)',
        label => 'PASSWD'
    );
    $np->add_arg(
        spec => 'protocols|L=s',
        help => '<authproto> : Authentication protocol (md5|sha : default md5)
   <privproto> : Priv protocole (des|aes : default des)',
        label => '<authproto>,<privproto>'
    );
    $np->add_arg(
        spec => 'warn|w=s',
        help => '1 value check : warning level for cpu in percent (on one minute)
   3 value check : comma separated level for load or cpu for 1min, 5min, 15min',
        required => 1,
        label => 'INTEGER | INT,INT,INT'
    );
    $np->add_arg(
        spec => 'crit|c=s',
        help => '1 value check : critical level for cpu in percent (on one minute)
   3 value check : comma separated level for load or cpu for 1min, 5min, 15min',
        required => 1,
        label => 'INTEGER | INT,INT,INT'
    );
    $np->add_arg(
        spec => 'type|T=s',
        help => 'CPU check : 
        stand : standard MIBII (works with Windows), 
                can handle multiple CPU.
        netsl : linux load provided by Net SNMP (1,5 & 15 minutes values)
        netsc : cpu usage given by net-snmp (100-idle)
        as400 : as400 CPU usage
        cisco : Cisco CPU usage
        cata  : Cisco catalyst CPU usage
        nsc   : NetScreen CPU usage
        fg    : Fortigate CPU usage
        bc    : Bluecoat CPU usage
        nokia : Nokia CPU usage
        hp    : HP procurve switch CPU usage
        lp    : Linkproof CPU usage
        hpux  : HP-UX load (1,5 & 15 minutes values)',
        label => 'stand|netsl|netsc|as400|cisco|bc|nokia|hp|lp',
        default => $o_check_type
    );
    $np->add_arg(
        spec => 'perfparse|f',
        help => 'Perfparse compatible output'
    );
    
    $np->getopts;
    $o_host = $np->opts->hostname;
    $o_port = $np->opts->port;
    $o_domain = $np->opts->domain;
    
    $o_timeout = $np->opts->timeout;
    
    $o_warn = $np->opts->warn;
    $o_crit = $np->opts->crit;
    
    $o_community = $np->opts->community;
    $o_login = $np->opts->login;
    $o_passwd = $np->opts->passwd;
    $o_version2 = $np->opts->v2c;
    $o_privpass = $np->opts->privpass;
    $v3protocols = $np->opts->protocols;
    
    $o_verb = $np->opts->verbose;
    
    $o_check_type = $np->opts->type;
    $o_perf = $np->opts->perfparse;
    
    # check the -T option
    my $T_option_valid = 0; 
    foreach (@valid_types) {
        if ($_ eq $o_check_type) {
            $T_option_valid = 1
        }
    }
    if ($T_option_valid == 0) {
        print "Invalid check type (-T)!\n";
        print_usage();
        exit $ERRORS{"UNKNOWN"}
    }
    # Basic checks
    if (defined($o_timeout) && (isnnum($o_timeout) || ($o_timeout < 2) || ($o_timeout > 60))) {
        print "Timeout must be >1 and <60 !\n";
        print_usage();
        exit $ERRORS{"UNKNOWN"};
    }
    if (!defined($o_timeout)) {
        $o_timeout=5;
    }
    if ($o_domain !~ /^(udp|udp6|tcp|tcp6)$/) {
        print "Invalid transport domain given!\n";
        print_usage();
        exit $ERRORS{"UNKNOWN"}
    }
    # check snmp information
    if ( !defined($o_community) && (!defined($o_login) || !defined($o_passwd)) ) {
        print "Put snmp login info!\n";
        print_usage();
        exit $ERRORS{"UNKNOWN"};
    }
    if ((defined($o_login) || defined($o_passwd)) && (defined($o_community) || defined($o_version2))) {
        print "Can't mix snmp v1,2c,3 protocols!\n";
        print_usage();
        exit $ERRORS{"UNKNOWN"};
    }
    if (defined ($v3protocols)) {
        if (!defined($o_login)) {
            print "Put snmp V3 login info with protocols!\n";
            print_usage();
            exit $ERRORS{"UNKNOWN"};
        }
        my @v3proto = split(/,/, $v3protocols);
        if ((defined ($v3proto[0])) && ($v3proto[0] ne "")) { # Auth protocol
            $o_authproto=$v3proto[0];
        }
        if (defined ($v3proto[1])) { # Priv  protocol
            $o_privproto=$v3proto[1];
        }
        if ((defined ($v3proto[1])) && (!defined($o_privpass))) {
            print "Put snmp V3 priv login info with priv protocols!\n";
            print_usage();
            exit $ERRORS{"UNKNOWN"};
        }
    }
    # Check warnings and critical
    if (!defined($o_warn) || !defined($o_crit)) {
        print "put warning and critical info!\n";
        print_usage();
        exit $ERRORS{"UNKNOWN"};
    }
    # Get rid of % sign
    $o_warn =~ s/\%//g; 
    $o_crit =~ s/\%//g;
    # Check for multiple warning and crit in case of -L
    if (($o_check_type eq "netsl") || ($o_check_type eq "cisco") || ($o_check_type eq "cata") || 
            ($o_check_type eq "nsc") || ($o_check_type eq "hpux")) {
        @o_warnL = split(/,/ , $o_warn);
        @o_critL = split(/,/ , $o_crit);
        if (($#o_warnL != 2) || ($#o_critL != 2)) {
            print "3 warnings and critical !\n";
            print_usage();
            exit $ERRORS{"UNKNOWN"};
        }
        for (my $i = 0; $i < 3; $i++) {
            if (isnnum($o_warnL[$i]) || isnnum($o_critL[$i])) {
                print "Numeric value for warning or critical !\n";
                print_usage();
                exit $ERRORS{"UNKNOWN"};
            }
            if ($o_warnL[$i] > $o_critL[$i]) {
                print "warning <= critical ! \n";
                print_usage();
                exit $ERRORS{"UNKNOWN"};
            }
        }
    } else {
        if (($o_warn =~ /,/) || ($o_crit =~ /,/)) {
            print "Multiple warning/critical levels not available for this check\n";
            print_usage();
            exit $ERRORS{"UNKNOWN"}
        }
        if (isnnum($o_warn) || isnnum($o_crit)) {
            print "Numeric value for warning or critical !\n";
            print_usage();
            exit $ERRORS{"UNKNOWN"};
        }
        if ($o_warn > $o_crit) {
            print "warning <= critical ! \n";
            print_usage();
            exit $ERRORS{"UNKNOWN"};
        }
    }
}

########## MAIN #######

$np = Monitoring::Plugin->new(
    version => $Version,
    shortname => $Name,
    usage => $usage,
    license => 'GPLv2',
    blurb => 'SNMP Load & CPU Monitor for Nagios\nGPLv2 licence, (c)2004-2007 Patrick Proy'
);

check_options();

# Check gobal timeout if snmp screws up
if (defined($TIMEOUT)) {
    verb("Alarm at $TIMEOUT + 5");
    alarm($TIMEOUT+5);
} else {
    verb("no global timeout defined : $o_timeout + 10");
    alarm ($o_timeout+10);
}

$SIG{'ALRM'} = sub {
    print "No answer from host\n";
    exit $ERRORS{"UNKNOWN"};
};

# Connect to host
my ($session, $error);
if ( defined($o_login) && defined($o_passwd)) {
    # SNMPv3 login
    verb("SNMPv3 login");
    if (!defined ($o_privpass)) {
        verb("SNMPv3 AuthNoPriv login : $o_login, $o_authproto");
        ($session, $error) = Net::SNMP->session(
            -hostname       => $o_host,
            -port           => $o_port,
            -version        => '3',
            -username       => $o_login,
            -authpassword   => $o_passwd,
            -authprotocol   => $o_authproto,
            -timeout        => $o_timeout,
            -domain         => $o_domain
        );
    } else {
        verb("SNMPv3 AuthPriv login : $o_login, $o_authproto, $o_privproto");
        ($session, $error) = Net::SNMP->session(
            -hostname       => $o_host,
            -version        => '3',
            -port           => $o_port,
            -username       => $o_login,
            -authpassword   => $o_passwd,
            -authprotocol   => $o_authproto,
            -privpassword   => $o_privpass,
            -privprotocol   => $o_privproto,
            -timeout        => $o_timeout,
            -domain         => $o_domain
        );
    }
} else {
    if (defined ($o_version2)) {
        # SNMPv2 Login
        verb("SNMP v2c login");
        ($session, $error) = Net::SNMP->session(
            -hostname  => $o_host,
            -version   => 2,
            -community => $o_community,
            -port      => $o_port,
            -timeout   => $o_timeout,
            -domain     => $o_domain
        );
    } else {
        # SNMPV1 login
        verb("SNMP v1 login");
        ($session, $error) = Net::SNMP->session(
            -hostname  => $o_host,
            -community => $o_community,
            -port      => $o_port,
            -timeout   => $o_timeout,
            -domain    => $o_domain
        );
    }
}
if (!defined($session)) {
    printf("ERROR opening session: %s.\n", $error);
    exit $ERRORS{"UNKNOWN"};
}

my $exit_val=undef;
########### Linux load check ##############

if ($o_check_type eq "netsl") {
    verb("Checking linux load");
    # Get load table
    my $resultat = $session->get_table(Baseoid => $linload_table); 

    if (!defined($resultat)) {
        printf("ERROR: Description table : %s.\n", $session->error);
        $session->close;
        exit $ERRORS{"UNKNOWN"};
    }
    $session->close;

    my @load = undef;
    my @iload = undef;
    my @oid = undef;
    my $exist = 0;
    foreach my $key (keys %$resultat) {
        verb("OID : $key, Desc : $$resultat{$key}");
        if ( $key =~ /$linload_name/ ) { 
            @oid=split (/\./,$key);
            $iload[0] = pop(@oid) if ($$resultat{$key} eq "Load-1");
            $iload[1] = pop(@oid) if ($$resultat{$key} eq "Load-5");
            $iload[2] = pop(@oid) if ($$resultat{$key} eq "Load-15");
            $exist = 1;
        }
    }

    if ($exist == 0) {
        print "Can't find snmp information on load : UNKNOWN\n";
        exit $ERRORS{"UNKNOWN"};
    }

    for (my $i = 0; $i < 3; $i++) {
        $load[$i] = $$resultat{$linload_load . "." . $iload[$i]};
    }

    my $output = "Load : $load[0] $load[1] $load[2] :";

    $exit_val = $ERRORS{"OK"};
    for (my $i = 0; $i < 3; $i++) {
        if ( $load[$i] > $o_critL[$i] ) {
            $output .= " $load[$i] > $o_critL[$i] : CRITICAL";
            $exit_val=$ERRORS{"CRITICAL"};
        }
        if ( $load[$i] > $o_warnL[$i] ) {
            # output warn error only if no critical was found 
            if ($exit_val eq $ERRORS{"OK"}) {
                $output .= " $load[$i] > $o_warnL[$i] : WARNING"; 
                $exit_val = $ERRORS{"WARNING"};
            }
        }
    }
    $output .= " OK" if ($exit_val eq $ERRORS{"OK"});
    if (defined($o_perf)) { 
        $output .= " | load_1_min=$load[0];$o_warnL[0];$o_critL[0] ";
        $output .= "load_5_min=$load[1];$o_warnL[1];$o_critL[1] ";
        $output .= "load_15_min=$load[2];$o_warnL[2];$o_critL[2]";
    }
    print "$output\n";
    exit $exit_val;
}

############## Cisco CPU check ################

if ($o_check_type eq "cisco") {
    my @oidlists = ($cisco_cpu_5m, $cisco_cpu_1m, $cisco_cpu_5s);
    my $resultat = $session->get_request(-varbindlist => \@oidlists);

    if (!defined($resultat)) {
        printf("ERROR: Description table : %s.\n", $session->error);
        $session->close;
        exit $ERRORS{"UNKNOWN"};
    }

    $session->close;

    if (!defined ($$resultat{$cisco_cpu_5s})) {
        print "No CPU information : UNKNOWN\n";
        exit $ERRORS{"UNKNOWN"};
    }

    my @load = undef;

    $load[0] = $$resultat{$cisco_cpu_5s};
    $load[1] = $$resultat{$cisco_cpu_1m};
    $load[2] = $$resultat{$cisco_cpu_5m};

    my $output = "CPU : $load[0] $load[1] $load[2] :";

    $exit_val = $ERRORS{"OK"};
    for (my $i = 0; $i < 3; $i++) {
        if ( $load[$i] > $o_critL[$i] ) {
            $output .=" $load[$i] > $o_critL[$i] : CRITICAL";
            $exit_val = $ERRORS{"CRITICAL"};
        }
        if ( $load[$i] > $o_warnL[$i] ) {
            # output warn error only if no critical was found
            if ($exit_val eq $ERRORS{"OK"}) {
                $output .= " $load[$i] > $o_warnL[$i] : WARNING"; 
                $exit_val = $ERRORS{"WARNING"};
            }
        }
    }
    $output .= " OK" if ($exit_val eq $ERRORS{"OK"});
    if (defined($o_perf)) {
        $output .= " | load_5_sec=$load[0]%;$o_warnL[0];$o_critL[0] ";
        $output .= "load_1_min=$load[1]%;$o_warnL[1];$o_critL[1] ";
        $output .= "load_5_min=$load[2]%;$o_warnL[2];$o_critL[2]";
    }

    print "$output\n";
    exit $exit_val;
}

############## Cisco Catalyst CPU check ################

if ($o_check_type eq "cata") {
    my @oidlists = ($ciscocata_cpu_5m, $ciscocata_cpu_1m, $ciscocata_cpu_5s);
    my $resultat = $session->get_request(-varbindlist => \@oidlists);

    if (!defined($resultat)) {
        printf("ERROR: Description table : %s.\n", $session->error);
        $session->close;
        exit $ERRORS{"UNKNOWN"};
    }

    $session->close;

    if (!defined ($$resultat{$ciscocata_cpu_5s})) {
        print "No CPU information : UNKNOWN\n";
        exit $ERRORS{"UNKNOWN"};
    }

    my @load = undef;

    $load[0] = $$resultat{$ciscocata_cpu_5s};
    $load[1] = $$resultat{$ciscocata_cpu_1m};
    $load[2] = $$resultat{$ciscocata_cpu_5m};

    my $output = "CPU : $load[0] $load[1] $load[2] :";

    $exit_val = $ERRORS{"OK"};
    for (my $i = 0; $i < 3; $i++) {
        if ( $load[$i] > $o_critL[$i] ) {
            $output .= " $load[$i] > $o_critL[$i] : CRITICAL";
            $exit_val = $ERRORS{"CRITICAL"};
        }
        if ( $load[$i] > $o_warnL[$i] ) {
            # output warn error only if no critical was found
            if ($exit_val eq $ERRORS{"OK"}) {
                $output .= " $load[$i] > $o_warnL[$i] : WARNING"; 
                $exit_val = $ERRORS{"WARNING"};
            }
        }
    }
    $output .= " OK" if ($exit_val eq $ERRORS{"OK"});
    if (defined($o_perf)) {
        $output .= " | load_5_sec=$load[0]%;$o_warnL[0];$o_critL[0] ";
        $output .= "load_1_min=$load[1]%;$o_warnL[1];$o_critL[1] ";
        $output .= "load_5_min=$load[2]%;$o_warnL[2];$o_critL[2]";
    }

    print "$output\n";
    exit $exit_val;
}

############## Netscreen CPU check ################

if ($o_check_type eq "nsc") {
    my @oidlists = ($nsc_cpu_5m, $nsc_cpu_1m, $nsc_cpu_5s);
    my $resultat = $session->get_request(-varbindlist => \@oidlists);

    if (!defined($resultat)) {
        printf("ERROR: Description table : %s.\n", $session->error);
        $session->close;
        exit $ERRORS{"UNKNOWN"};
    }

    $session->close;

    if (!defined ($$resultat{$nsc_cpu_5s})) {
        print "No CPU information : UNKNOWN\n";
        exit $ERRORS{"UNKNOWN"};
    }

    my @load = undef;

    $load[0] = $$resultat{$nsc_cpu_5s};
    $load[1] = $$resultat{$nsc_cpu_1m};
    $load[2] = $$resultat{$nsc_cpu_5m};

    my $output = "CPU : $load[0] $load[1] $load[2] :";

    $exit_val = $ERRORS{"OK"};
    for (my $i = 0; $i < 3; $i++) {
        if ( $load[$i] > $o_critL[$i] ) {
            $output .= " $load[$i] > $o_critL[$i] : CRITICAL";
            $exit_val = $ERRORS{"CRITICAL"};
        }
        if ( $load[$i] > $o_warnL[$i] ) {
            # output warn error only if no critical was found
            if ($exit_val eq $ERRORS{"OK"}) {
                $output .= " $load[$i] > $o_warnL[$i] : WARNING"; 
                $exit_val = $ERRORS{"WARNING"};
            }
        }
    }
    $output .= " OK" if ($exit_val eq $ERRORS{"OK"});
    if (defined($o_perf)) {
        $output .= " | cpu_5_sec=$load[0]%;$o_warnL[0];$o_critL[0] ";
        $output .= "cpu_1_min=$load[1]%;$o_warnL[1];$o_critL[1] ";
        $output .= "cpu_5_min=$load[2]%;$o_warnL[2];$o_critL[2]";
    }

    print "$output\n";
    exit $exit_val;
}

################## CPU for : AS/400 , Netsnmp, HP, Bluecoat, linkproof, fortigate  ###########
if ( $o_check_type =~ /netsc|as400|bc|nokia|^hp$|lp|fg/ ) {
    # Get load table
    my @oidlist = $cpu_oid{$o_check_type}; 
    verb("Checking OID : @oidlist");
    my $resultat = $session->get_request(-varbindlist => \@oidlist);
    if (!defined($resultat)) {
        printf("ERROR: Description table : %s.\n", $session->error);
        $session->close;
        exit $ERRORS{"UNKNOWN"};
    }
    $session->close;

    if (!defined ($$resultat{$cpu_oid{$o_check_type}})) {
        print "No CPU information : UNKNOWN\n";
        exit $ERRORS{"UNKNOWN"};
    }

    my $load = $$resultat{$cpu_oid{$o_check_type}};
    verb("OID returned $load");
    # for AS400, divide by 100
    if ($o_check_type eq "as400") {
        $load /= 100;
    }
    # for Net-snmp : oid returned idle time so load = 100-idle.
    if ($o_check_type eq "netsc") {
        $load = 100 - $load;
    }

    my $output = sprintf("CPU used %.1f%% (",$load);

    $exit_val = $ERRORS{"OK"};
    if ($load > $o_crit) {
        $output .= ">$o_crit) : CRITICAL";
        $exit_val=$ERRORS{"CRITICAL"};
    } else {
        if ($load > $o_warn) {
            $output .= ">$o_warn) : WARNING";
            $exit_val=$ERRORS{"WARNING"};
        }
    }
    $output .= "<$o_warn) : OK" if ($exit_val eq $ERRORS{"OK"});
    if (defined($o_perf)) {
        $output .= " | cpu_prct_used=$load%;$o_warn;$o_crit"
    }
    print "$output\n";
    exit $exit_val;
}

##### Checking hpux load
if ($o_check_type eq "hpux") {

    verb("Checking hpux load");

    my @oidlists = ($hpux_load_1_min, $hpux_load_5_min, $hpux_load_15_min);
    my $resultat = $session->get_request(-varbindlist => \@oidlists);

    if (!defined($resultat)) {
        printf("ERROR: Load table : %s.\n", $session->error);
        $session->close;
        exit $ERRORS{"UNKNOWN"};
    }

    $session->close;

    if (!defined ($$resultat{$hpux_load_1_min})) {
        print "No Load information : UNKNOWN\n";
        exit $ERRORS{"UNKNOWN"};
    }

    my @load = undef;

    $load[0] = $$resultat{$hpux_load_1_min}/100;
    $load[1] = $$resultat{$hpux_load_5_min}/100;
    $load[2] = $$resultat{$hpux_load_15_min}/100;

    my $output = "Load : $load[0] $load[1] $load[2] :";

    $exit_val = $ERRORS{"OK"};
    for (my $i = 0; $i < 3; $i++) {
        if ( $load[$i] > $o_critL[$i] ) {
            $output .= " $load[$i] > $o_critL[$i] : CRITICAL";
            $exit_val = $ERRORS{"CRITICAL"};
        }
        if ( $load[$i] > $o_warnL[$i] ) {
            # output warn error only if no critical was found
            if ($exit_val eq $ERRORS{"OK"}) {
                $output .= " $load[$i] > $o_warnL[$i] : WARNING"; 
                $exit_val=$ERRORS{"WARNING"};
            }
        }
    }
    $output .= " OK" if ($exit_val eq $ERRORS{"OK"});
    if (defined($o_perf)) {
        $output .= " | load_1_min=$load[0]%;$o_warnL[0];$o_critL[0] ";
        $output .= "load_5_min=$load[1]%;$o_warnL[1];$o_critL[1] ";
        $output .= "load_15_min=$load[2]%;$o_warnL[2];$o_critL[2]";
    }

    print "$output\n";
    exit $exit_val;
}

########## Standard cpu usage check ############
# Get desctiption table
my $resultat = $session->get_table(Baseoid => $base_proc);

if (!defined($resultat)) {
    printf("ERROR: Description table : %s.\n", $session->error);
    $session->close;
    exit $ERRORS{"UNKNOWN"};
}

$session->close;

my ($cpu_used, $ncpu) = (0, 0);
foreach my $key (keys %$resultat) {
    verb("OID : $key, Desc : $$resultat{$key}");
    if ( $key =~ /$proc_load/) {
        $cpu_used += $$resultat{$key};
        $ncpu++;
    }
}

if ($ncpu == 0) {
    print "Can't find CPU usage information : UNKNOWN\n";
    exit $ERRORS{"UNKNOWN"};
}

$cpu_used /= $ncpu;

my $output = join("", "$ncpu CPU, ", $ncpu == 1 ? "load" : "average load");
$output .= sprintf(" %.1f%%",$cpu_used);
$exit_val = $ERRORS{"OK"};

if ($cpu_used > $o_crit) {
    $output .= " > $o_crit% : CRITICAL";
    $exit_val = $ERRORS{"CRITICAL"};
} else {
    if ($cpu_used > $o_warn) {
        $output .= " > $o_warn% : WARNING";
        $exit_val = $ERRORS{"WARNING"};
    }
}
$output .= " < $o_warn% : OK" if ($exit_val eq $ERRORS{"OK"});
if (defined($o_perf)) {
    $output .= " | cpu_prct_used=$cpu_used%;$o_warn;$o_crit";
}
print "$output\n";
exit $exit_val;
